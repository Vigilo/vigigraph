#
# vigigraph - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory,
# and generally should not be modified by end users.

[DEFAULT]
debug = false
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 80

[app:main]
use = egg:vigigraph

;
; Configuration de VigiGraph
;

;
; 1 - Configuration de la base de données.
;

; URL d'accès à la base de données.
sqlalchemy.url=postgres://vigilo:vigilo@localhost/vigilo

; Le préfixe des tables de Vigilo dans la base de données.
db_basename=vigilo_

; Options de bas niveau de la couche ORM
; (pour déboguer les requêtes SQL).
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600
sqlalchemy.pool_size=20
sqlalchemy.max_overflow=100

;
; 2 - Configuration des éléments de sécurité.
;

; Méthode de hachage des mots de passe.
; Les méthodes suivantes sont supportées : md5,sha1.
; ATTENTION : Si cette directive n'est pas renseignée
; ou si la méthode indiquée est introuvable, les mots
; de passe sont stockés en clair dans la base de données !!
password_hashing_function=md5

; La clé secrète utilisée pour chiffrer/déchiffrer la session.
; Vous DEVEZ changer cette valeur avant la mise en production.
; Vous pouvez utilisez la même valeur que pour la clé
; "sa_auth.cookie_secret".
beaker.session.secret = vigilo

; La clé secret utilisée pour chiffrer/déchiffrer le cookie
; d'authentification.
; Vous DEVEZ changer cette valeur avant la mise en production.
; Vous pouvez utilisez la même valeur que pour la clé
; "beaker.session.secret".
sa_auth.cookie_secret = vigilo

; Indique si un mécanisme d'authentification externe
; (ex : Kerberos) est en place ou non.
external_auth=False

; Fichier de configuration définissant la politique de gestion
; de l'authentification.
auth.config = %(here)s/who.ini

; Priorité des événements de journalisation émis.
; Valeurs possibles : debug, info, notice, warning, error, critical.
;auth.log_level = debug

;
; 3 - Configuration de l'interface.
;

; La langue par défaut de l'interface.
lang=fr

; Lien d'aide (redirigeant vers la documentation de Vigilo
; par exemple).
help_link=http://help.example.com/vigilo

; URL vers laquelle le logo de Vigilo redirige.
logo_link = /

; Délai de rafraîchissement automatique (en secondes).
refresh_delay = 30

;
; 4 - Configuration des proxies Nagios & RRDgraph.
;

; Emplacement des applications (vigirrd, Nagios, ...)
; sur les serveurs distants.
app_path.rrdgraph = /vigilo/vigirrd/
app_path.nagios = /nagios/

; Schéma ("protocole") à utiliser pour se connecter
; à l'application. En général : http ou https.
; Par défaut : http
app_scheme.rrdgraph = http
app_scheme.nagios = http

; Port de connexion au serveur distant hébergeant
; l'application.
; Par défaut : 80
app_port.rrdgraph = 80
app_port.nagios = 80

;
; 5 - Configuration avancée des sessions.
;

; Le nom du dossier dans lequel les fichiers de sessions sont conservés.
cache_dir = /tmp/vigilo/vigigraph/data

; Le nom du cookie de session qui sera créé sur le navigateur
; du client.
beaker.session.key = vigigraph

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

;
; 6 - Autres options.
; Pensez à configurer le logging dans les sections
; "loggers", "handlers" & "formatters" ci-dessous.
;

; Doit être laissé à true pour obtenir une application fonctionnelle.
full_stack = true

; Doit valoir false en production (risque de sécurité sinon).
# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
set debug = false

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html

[loggers]
keys = root, vigigraph, sqlalchemy, auth

[handlers]
keys = console,sql_log,root_log,vigigraph_log,auth_log

[formatters]
keys = generic

; If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = INFO
handlers = root_log

[logger_vigigraph]
level = INFO
handlers = vigigraph_log
qualname = vigigraph

[logger_sqlalchemy]
level = INFO
handlers = sql_log
qualname = sqlalchemy.engine

; A logger for authentication, identification and authorization -- this is
; repoze.who and repoze.what:
[logger_auth]
level = INFO
handlers = auth_log
qualname = auth

; If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_sql_log]
class = handlers.TimedRotatingFileHandler
args = ('/var/log/vigilo/vigigraph/sql.log', 'D', 30, 12)
level = DEBUG
formatter = generic

[handler_root_log]
class = handlers.TimedRotatingFileHandler
args = ('/var/log/vigilo/vigigraph/root.log', 'D', 30, 12)
level = DEBUG
formatter = generic

[handler_vigigraph_log]
class = handlers.TimedRotatingFileHandler
args = ('/var/log/vigilo/vigigraph/vigigraph.log', 'D', 30, 12)
level = DEBUG
formatter = generic

[handler_auth_log]
class = handlers.TimedRotatingFileHandler
args = ('/var/log/vigilo/vigigraph/auth.log', 'D', 30, 12)
level = DEBUG
formatter = generic

; If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
